import os
import time
import pickle as pkl
import scipy
import numpy as np
import pandas as pd

import features_loader

from sklearn.metrics import roc_auc_score
from sklearn.model_selection import StratifiedKFold
from sklearn.naive_bayes import GaussianNB
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import BaggingClassifier
from sklearn.ensemble import AdaBoostClassifier
from sklearn.ensemble import ExtraTreesClassifier
from sklearn.ensemble import RandomForestClassifier
from xgboost import XGBClassifier
from sklearn.externals import joblib
from sklearn.decomposition import PCA


fid_dict = pkl.load(open('./dataset/fid_dict.pkl', 'rb'))

with open('./dataset/training-set.csv') as f:
    train_row = [l.split(',') for l in f.read().strip().split('\n')]
    train_row = [[fid_dict[l[0]], int(l[1])] for l in train_row if l[0] in fid_dict]
    train_dict = dict(train_row)
    train_row = np.array(train_row)
    positive_fid = set(train_row[train_row[:, 1] == 1, 0])
    negative_fid = set(train_row[train_row[:, 1] == 0, 0])

with open('./dataset/testing-set.csv') as f:
    test_row = [l.split(',') for l in f.read().strip().split('\n')]
    test_row = [l for l in test_row if l[0] in fid_dict]    


X = features_loader.load_X_svd256_stack_fs()
X_train = X[train_row[:, 0]]
y_train = train_row[:, 1]

assert(X.shape[0] == 81894)
print('X.shape:', X.shape)


start_t = time.time()
for ith_ensemble in range(20000):
    fpath = './attack/ensemble_svd256_stack_fs/rf_%05d.pkl' % (ith_ensemble)
    if not os.path.isfile(fpath):
        print('Processing %s ... ' % fpath, flush=True)

        model = RandomForestClassifier(
            n_estimators=1000,
            max_depth=10,
            max_features=25,
            criterion='entropy',
            random_state=ith_ensemble, n_jobs=8)
        print('Fitting', model, flush=True)
        model.fit(X_train, y_train)

        y_test_ = model.predict_proba(X[len(train_row):])[:, 1]
        pkl.dump(y_test_, open(fpath, 'wb'))
        print('done / Elapsed %.f sec.' % (time.time() - start_t))


    fpath = './attack/ensemble_svd256_stack_fs/xgb_%05d.pkl' % (ith_ensemble)
    if not os.path.isfile(fpath):
        print('Processing %s ... ' % fpath, flush=True)

        model = XGBClassifier(
            n_estimators=100,
            max_depth=5,
            sumsample=0.7,
            colsample_bytree=0.7,
            max_delta_step=0,
            reg_lambda=4,
            random_state=ith_ensemble, n_jobs=8)
        print('Fitting', model, flush=True)
        model.fit(X_train, y_train)

        y_test_ = model.predict_proba(X[len(train_row):])[:, 1]
        pkl.dump(y_test_, open(fpath, 'wb'))
        print('done / Elapsed %.f sec.' % (time.time() - start_t))
