import os
import time
import glob
import pickle as pkl
import scipy
import numpy as np
import pandas as pd

import features_loader

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from xgboost import XGBClassifier

fid_dict = pkl.load(open('./dataset/fid_dict.pkl', 'rb'))

with open('./dataset/training-set.csv') as f:
    train_row = [l.split(',') for l in f.read().strip().split('\n')]
    train_row = [[fid_dict[l[0]], int(l[1])] for l in train_row if l[0] in fid_dict]
    train_dict = dict(train_row)
    train_row = np.array(train_row)
    positive_fid = set(train_row[train_row[:, 1] == 1, 0])
    negative_fid = set(train_row[train_row[:, 1] == 0, 0])

with open('./dataset/testing-set.csv') as f:
    test_row = [l.split(',') for l in f.read().strip().split('\n')]
    test_row = [l for l in test_row if l[0] in fid_dict]

X_svd256 = features_loader.load_X_svd256()
X_svd256_train = X_svd256[:len(train_row)]
y_train = train_row[:len(train_row), 1]
print('X_svd256.shape:', X_svd256.shape)

x1, x2, y1, y2 = train_test_split(
    X_svd256_train, y_train,
    test_size=1/3,
    random_state=277
)

paths = sorted(glob.glob('./models/xgb/*.pkl') + glob.glob('./models/random_forest/*.pkl'))
for ith, path in enumerate(paths):
    target_path = './models/blender/%05d' % ith
    print('Target path', target_path)
    model = pkl.load(open(path, 'rb'))
    print('Fitting', model)
    model.fit(X_svd256_train, y_train)
    pkl.dump(model, open(target_path, 'wb'))
    

# for ith in range(50):
#     print('=' * 70)
#     xgb_path = './models/blender/xgb_%d.pkl' % (ith)
#     if not os.path.isfile(xgb_path):
#         print('Target path', xgb_path)
#         xgb = XGBClassifier(
#             n_estimators=500,
#             max_depth=np.random.randint(7, 13),
#             sumsample=np.random.uniform(0.6, 0.8),
#             colsample_bytree=0.7,
#             max_delta_step=1,
#             reg_lambda=2,
#             gamma=1,
#             random_state=ith, n_jobs=4, silent=True)
#         print('Fitting', xgb)
#         xgb.fit(x1, y1)
#         pkl.dump(xgb, open(xgb_path, 'wb'))
#         del xgb
    
    
#     random_forest_path = './models/blender/random_forest_%d.pkl' % (ith)
#     if not os.path.isfile(random_forest_path):
#         print('Target path', random_forest_path)
#         random_forest = RandomForestClassifier(
#             n_estimators=500,
#             max_features=np.random.randint(25, 50),
#             class_weight='balanced_subsample',
#             criterion='entropy',
#             oob_score=True,
#             random_state=ith, n_jobs=4)
#         print('Fitting', random_forest)
#         random_forest.fit(x1, y1)
#         pkl.dump(random_forest, open(random_forest_path, 'wb'))
#         del random_forest
