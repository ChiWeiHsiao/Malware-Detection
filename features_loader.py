import scipy
import numpy as np
import pickle as pkl
from sklearn.preprocessing import normalize

fid_dict = pkl.load(open('./dataset/fid_dict.pkl', 'rb'))
with open('./dataset/training-set.csv') as f:
    train_row = [l.split(',') for l in f.read().strip().split('\n')]
    train_row = [[fid_dict[l[0]], int(l[1])] for l in train_row if l[0] in fid_dict]
    train_dict = dict(train_row)
    train_row = np.array(train_row)

# Common features
feature_sz = pkl.load(open('./dataset/features/feature_sz.pkl', 'rb'))
feature_samec_diffp = pkl.load(open('./dataset/features/feature_samec_diffp.pkl', 'rb'))
feature_num_distinct_target = pkl.load(open('./dataset/features/feature_num_distinct_target.pkl', 'rb'))
feature_time_elps = pkl.load(open('./dataset/features/feature_time_elps.pkl', 'rb'))
feature_interval = pkl.load(open('./dataset/features/feature_interval.pkl', 'rb'))
feature_interval_std = pkl.load(open('./dataset/features/feature_interval_std.pkl', 'rb'))
feature_avg_sz_4cid = pkl.load(open('./dataset/features/feature_avg_sz_4cid.pkl', 'rb'))
feature_time_elps_4cid = pkl.load(open('./dataset/features/feature_time_elps_4cid.pkl', 'rb'))
feature_avg_interval_4cid = pkl.load(open('./dataset/features/feature_avg_interval_4cid.pkl', 'rb'))
feature_std_interval_4cid = pkl.load(open('./dataset/features/feature_std_interval_4cid.pkl', 'rb'))
feature_bag_of_pid = pkl.load(open('./dataset/features/feature_bag_of_pid.pkl', 'rb'))
feature_bag_of_pid_4cid = pkl.load(open('./dataset/features/feature_bag_of_pid_4cid.pkl', 'rb'))
feature_oneshot_num = pkl.load(open('./dataset/features/feature_oneshot_num.pkl', 'rb'))
feature_oneshot_p = pkl.load(open('./dataset/features/feature_oneshot_p.pkl', 'rb'))
feature_unigram = pkl.load(open('./dataset/features/feature_unigram.pkl', 'rb'))
feature_bigram = pkl.load(open('./dataset/features/feature_bigram.pkl', 'rb'))
feature_unigram_entropy = pkl.load(open('./dataset/features/feature_unigram_entropy.pkl', 'rb'))
feature_bigram_entropy = pkl.load(open('./dataset/features/feature_bigram_entropy.pkl', 'rb'))
feature_max_retry_allday = pkl.load(open('./dataset/features/feature_max_retry_allday.pkl', 'rb'))
feature_max_retry_perday = pkl.load(open('./dataset/features/feature_max_retry_perday.pkl', 'rb'))
feature_max_retry_perhour = pkl.load(open('./dataset/features/feature_max_retry_perhour.pkl', 'rb'))
feature_max_retry_perminutes = pkl.load(open('./dataset/features/feature_max_retry_perminutes.pkl', 'rb'))
cid_csr_matrix_col_sel_greedy_5fold = pkl.load(open('./dataset/features/cid_csr_matrix_col_sel_greedy_5fold.pkl', 'rb'))

bag_of_pid_sel_col = feature_bag_of_pid[train_row[:, 0]].sum(axis=0) > 1000
features = {
    'X_simple': np.hstack([
        feature_sz.reshape(-1, 1),
        feature_samec_diffp.reshape(-1, 1),
        feature_num_distinct_target.reshape(-1, 1),
        feature_time_elps.reshape(-1, 1),
        feature_interval.reshape(-1, 1),
        feature_interval_std.reshape(-1, 1),
        feature_avg_sz_4cid.reshape(-1, 1),
        feature_time_elps_4cid.reshape(-1, 1),
        feature_avg_interval_4cid.reshape(-1, 1),
        feature_std_interval_4cid.reshape(-1, 1),
        feature_oneshot_p.reshape(-1, 1),
        feature_bag_of_pid[:, bag_of_pid_sel_col],
        feature_bag_of_pid_4cid[:, bag_of_pid_sel_col],
        feature_unigram,
        feature_bigram,
        feature_unigram_entropy.reshape(-1, 1),
        feature_bigram_entropy.reshape(-1, 1),
        feature_max_retry_allday.reshape(-1, 1),
        feature_max_retry_perday.reshape(-1, 1),
        feature_max_retry_perhour.reshape(-1, 1),
        feature_max_retry_perminutes.reshape(-1, 1),
    ]),
    'cid_csr_matrix_col_sel_greedy_5fold': cid_csr_matrix_col_sel_greedy_5fold,
}



def load_X_svd256_stack_fs():
    return pkl.load(open('./dataset/features/X_svd256_stack_fs.pkl', 'rb'))

def load_X_simple():
    return features['X_simple']

def load_X_detail():
    return scipy.sparse.hstack([
        features['X_simple'],
        features['cid_csr_matrix_col_sel_greedy_5fold'],
    ]).tocsr()

def load_X_norm():
    return scipy.sparse.hstack([
        features['X_simple'],
        normalize(features['cid_csr_matrix_col_sel_greedy_5fold']),
    ]).tocsr()

def load_X():
    return scipy.sparse.hstack([
        features['X_simple'],
        features['cid_csr_matrix_col_sel_greedy_5fold'] > 0,
    ]).tocsr()

def load_X_svd6():
    if 'cid_svd6' not in features:
        features['cid_svd6'] = pkl.load(open('./dataset/features/cid_svd6', 'rb'))
    return np.hstack([
        features['X_simple'],
        features['cid_svd6'],
    ])

def load_X_svd10():
    if 'cid_svd10' not in features:
        features['cid_svd10'] = pkl.load(open('./dataset/features/cid_svd10', 'rb'))
    return np.hstack([
        features['X_simple'],
        features['cid_svd10'],
    ])

def load_X_svd100():
    if 'cid_svd100' not in features:
        features['cid_svd100'] = pkl.load(open('./dataset/features/cid_svd100', 'rb'))
    return np.hstack([
        features['X_simple'],
        features['cid_svd100'],
    ])

def load_X_svd256():
    if 'cid_svd256' not in features:
        features['cid_svd256'] = pkl.load(open('./dataset/features/cid_svd256', 'rb'))
    return np.hstack([
        features['X_simple'],
        features['cid_svd256'],
    ])

def load_X_embedding_cid():
    if 'embedding_cid' not in features:
        features['embedding_cid']  = pkl.load(open('./dataset/features/embedding_cid.pkl', 'rb'))
    return np.hstack([
        features['X_simple'],
        features['embedding_cid'],
    ])

def load_cid_csr_01_matrix_100():
    if 'cid_csr_matrix_100' not in features:
        features['cid_csr_matrix_100'] = pkl.load(open('./dataset/features/cid_csr_matrix_100.pkl', 'rb'))
    return (features['cid_csr_matrix_100'] > 0).astype(np.uint8)

def load_cid_csr_matrix_col_sel_greedy_5fold():
    return features['cid_csr_matrix_col_sel_greedy_5fold']

def load_cid_csr_01_matrix_col_sel_greedy_5fold():
    return (features['cid_csr_matrix_col_sel_greedy_5fold'] > 0).astype(np.uint8)

def load_embedding_cid():
    if 'embedding_cid' not in features:
        features['embedding_cid']  = pkl.load(open('./dataset/features/embedding_cid.pkl', 'rb'))
    return features['embedding_cid']

def load_embedding_cid_autoencoder():
    if 'embedding_cid_autoencoder' not in features:
        features['embedding_cid_autoencoder']  = pkl.load(open('./dataset/features/embedding_cid_autoencoder.pkl', 'rb'))
    return features['embedding_cid_autoencoder']

def load_cid_csr_matrix():
    if 'cid_csr_matrix_0' not in features:
        features['cid_csr_matrix_0'] = pkl.load(open('./dataset/features/cid_csr_matrix_0.pkl', 'rb'))
    return features['cid_csr_matrix_0']
